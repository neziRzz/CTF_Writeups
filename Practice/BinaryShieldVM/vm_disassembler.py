def merge_bytes(byte_list, index, mode="qword"):
    size = 8 if mode == "qword" else 4
    chunk = byte_list[index:index+size]  # Extract the required bytes

    if len(chunk) < size:  # Ensure there are enough bytes
        return "Not enough bytes to form a full {}".format(mode.upper())

    merged_value = sum(b << (8 * idx) for idx, b in enumerate(chunk))
    return merged_value

bytecode = [ 0x01, 0x61, 0x01, 0x00, 0x00, 0x01, 0x61, 0x01, 0x00, 0x01, 
  0x01, 0x61, 0x01, 0x00, 0x02, 0x01, 0x61, 0x01, 0x00, 0x03, 
  0x01, 0x61, 0x01, 0x00, 0x04, 0x01, 0x61, 0x01, 0x00, 0x05, 
  0x01, 0x61, 0x01, 0x00, 0x06, 0x01, 0x61, 0x01, 0x00, 0x07, 
  0x01, 0x61, 0x01, 0x00, 0x08, 0x01, 0x61, 0x01, 0x00, 0x09, 
  0x01, 0x61, 0x01, 0x00, 0x0A, 0x01, 0x61, 0x01, 0x00, 0x0B, 
  0x01, 0x61, 0x01, 0x00, 0x0C, 0x01, 0x61, 0x01, 0x00, 0x0D, 
  0x01, 0x61, 0x01, 0x00, 0x0E, 0x01, 0x61, 0x01, 0x00, 0x0F, 
  0x01, 0x61, 0x01, 0x00, 0x10, 0x6A, 0x60, 0x01, 0x00, 0x07, 
  0x0A, 0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x07, 0x0A, 
  0x62, 0x01, 0x00, 0x94, 0x61, 0x01, 0x00, 0x10, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x63, 0x01, 0x00, 0x01, 
  0x61, 0x01, 0x00, 0x00, 0x6C, 0x62, 0x01, 0x00, 0x6A, 0x60, 
  0x01, 0x00, 0x07, 0x94, 0x61, 0x01, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x61, 0x01, 0x00, 0x10, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB1, 0x62, 0x01, 
  0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0xB1, 0x62, 0x01, 0x00, 
  0x01, 0x61, 0x01, 0x00, 0x10, 0x01, 0x61, 0x01, 0x00, 0x10, 
  0x90, 0x60, 0x01, 0x00, 0x03, 0x6A, 0x60, 0x01, 0x00, 0x10, 
  0x07, 0x67, 0x01, 0x00, 0x6A, 0x60, 0x01, 0x00, 0x07, 0x94, 
  0x61, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x94, 0x61, 0x01, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xB1, 0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 
  0x00, 0x10, 0xB1, 0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 
  0x10, 0x01, 0x61, 0x01, 0x00, 0x10, 0xB1, 0x61, 0x01, 0x00, 
  0x43, 0x92, 0x25, 0x77, 0x6A, 0x60, 0x01, 0x00, 0x10, 0x07, 
  0x67, 0x01, 0x00, 0x6A, 0x60, 0x01, 0x00, 0x07, 0x94, 0x61, 
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x94, 0x61, 0x01, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xB1, 0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 
  0x10, 0xB1, 0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 
  0x0A, 0x62, 0x01, 0x00, 0x89, 0x66, 0x01, 0x00, 0x01, 0x61, 
  0x01, 0x00, 0x10, 0x9F, 0x66, 0x01, 0x00, 0xB1, 0x61, 0x01, 
  0x00, 0x23, 0x00, 0x00, 0x00, 0x81, 0x64, 0x01, 0x00, 0x01, 
  0x61, 0x01, 0x00, 0x00, 0x6A, 0x60, 0x01, 0x00, 0x10, 0x07, 
  0x67, 0x01, 0x00, 0x6A, 0x60, 0x01, 0x00, 0x07, 0x94, 0x61, 
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x94, 0x61, 0x01, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xB1, 0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 
  0x10, 0xB1, 0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 
  0x0A, 0x62, 0x01, 0x00, 0x89, 0x66, 0x01, 0x00, 0x01, 0x61, 
  0x01, 0x00, 0x10, 0x9F, 0x66, 0x01, 0x00, 0xB1, 0x61, 0x01, 
  0x00, 0x23, 0x00, 0x00, 0x00, 0x13, 0x64, 0x01, 0x00, 0x01, 
  0x61, 0x01, 0x00, 0x00, 0x6A, 0x60, 0x01, 0x00, 0x10, 0x07, 
  0x67, 0x01, 0x00, 0x6A, 0x60, 0x01, 0x00, 0x07, 0x94, 0x61, 
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x94, 0x61, 0x01, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xB1, 0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 
  0x10, 0xB1, 0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 
  0x0A, 0x62, 0x01, 0x00, 0x89, 0x66, 0x01, 0x00, 0x01, 0x61, 
  0x01, 0x00, 0x10, 0x9F, 0x66, 0x01, 0x00, 0xB1, 0x61, 0x01, 
  0x00, 0x43, 0x08, 0x00, 0x00, 0xC9, 0x62, 0x01, 0x00, 0x01, 
  0x61, 0x01, 0x00, 0x00, 0x6A, 0x60, 0x01, 0x00, 0x10, 0x07, 
  0x67, 0x01, 0x00, 0x6A, 0x60, 0x01, 0x00, 0x07, 0x94, 0x61, 
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x94, 0x61, 0x01, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xB1, 0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 
  0x10, 0xB1, 0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 
  0x0A, 0x62, 0x01, 0x00, 0x89, 0x66, 0x01, 0x00, 0x01, 0x61, 
  0x01, 0x00, 0x10, 0x9F, 0x66, 0x01, 0x00, 0xB1, 0x61, 0x01, 
  0x00, 0x66, 0x54, 0x00, 0x00, 0x13, 0x64, 0x01, 0x00, 0x01, 
  0x61, 0x01, 0x00, 0x00, 0x6A, 0x60, 0x01, 0x00, 0x10, 0x07, 
  0x67, 0x01, 0x00, 0x6A, 0x60, 0x01, 0x00, 0x07, 0x94, 0x61, 
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x94, 0x61, 0x01, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xB1, 0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 
  0x10, 0xB1, 0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 
  0x0A, 0x62, 0x01, 0x00, 0x89, 0x66, 0x01, 0x00, 0x01, 0x61, 
  0x01, 0x00, 0x10, 0x9F, 0x66, 0x01, 0x00, 0xB1, 0x61, 0x01, 
  0x00, 0x43, 0x08, 0x00, 0x00, 0xC9, 0x62, 0x01, 0x00, 0x01, 
  0x61, 0x01, 0x00, 0x00, 0x6A, 0x60, 0x01, 0x00, 0x10, 0x07, 
  0x67, 0x01, 0x00, 0x6A, 0x60, 0x01, 0x00, 0x07, 0x94, 0x61, 
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x94, 0x61, 0x01, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xB1, 0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 
  0x10, 0xB1, 0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 
  0x0A, 0x62, 0x01, 0x00, 0x89, 0x66, 0x01, 0x00, 0x01, 0x61, 
  0x01, 0x00, 0x10, 0x9F, 0x66, 0x01, 0x00, 0xB1, 0x61, 0x01, 
  0x00, 0x34, 0x02, 0x00, 0x00, 0x81, 0x64, 0x01, 0x00, 0x01, 
  0x61, 0x01, 0x00, 0x00, 0x6A, 0x60, 0x01, 0x00, 0x10, 0x07, 
  0x67, 0x01, 0x00, 0x6A, 0x60, 0x01, 0x00, 0x07, 0x94, 0x61, 
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x94, 0x61, 0x01, 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xB1, 0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 
  0x10, 0xB1, 0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 
  0x01, 0x61, 0x01, 0x00, 0x10, 0xB1, 0x61, 0x01, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x6A, 0x60, 0x01, 0x00, 0x10, 0x07, 0x67, 
  0x01, 0x00, 0x6A, 0x60, 0x01, 0x00, 0x07, 0x94, 0x61, 0x01, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 
  0x61, 0x01, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xB1, 0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 
  0xB1, 0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0x0A, 
  0x62, 0x01, 0x00, 0x89, 0x66, 0x01, 0x00, 0x01, 0x61, 0x01, 
  0x00, 0x10, 0x9F, 0x66, 0x01, 0x00, 0xB1, 0x61, 0x01, 0x00, 
  0x54, 0x36, 0x06, 0x00, 0xC9, 0x62, 0x01, 0x00, 0x01, 0x61, 
  0x01, 0x00, 0x00, 0x6A, 0x60, 0x01, 0x00, 0x10, 0x07, 0x67, 
  0x01, 0x00, 0x6A, 0x60, 0x01, 0x00, 0x07, 0x94, 0x61, 0x01, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 
  0x61, 0x01, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xB1, 0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 
  0xB1, 0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0x0A, 
  0x62, 0x01, 0x00, 0x89, 0x66, 0x01, 0x00, 0x01, 0x61, 0x01, 
  0x00, 0x10, 0x9F, 0x66, 0x01, 0x00, 0xB1, 0x61, 0x01, 0x00, 
  0x45, 0x45, 0x00, 0x00, 0x13, 0x64, 0x01, 0x00, 0x01, 0x61, 
  0x01, 0x00, 0x00, 0x6A, 0x60, 0x01, 0x00, 0x10, 0x07, 0x67, 
  0x01, 0x00, 0x6A, 0x60, 0x01, 0x00, 0x07, 0x94, 0x61, 0x01, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 
  0x61, 0x01, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xB1, 0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 
  0xB1, 0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0x0A, 
  0x62, 0x01, 0x00, 0x89, 0x66, 0x01, 0x00, 0x01, 0x61, 0x01, 
  0x00, 0x10, 0x9F, 0x66, 0x01, 0x00, 0xB1, 0x61, 0x01, 0x00, 
  0x66, 0x54, 0x06, 0x00, 0x81, 0x64, 0x01, 0x00, 0x01, 0x61, 
  0x01, 0x00, 0x00, 0x6A, 0x60, 0x01, 0x00, 0x10, 0x07, 0x67, 
  0x01, 0x00, 0x6A, 0x60, 0x01, 0x00, 0x07, 0x94, 0x61, 0x01, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 
  0x61, 0x01, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xB1, 0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 
  0xB1, 0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0x0A, 
  0x62, 0x01, 0x00, 0x89, 0x66, 0x01, 0x00, 0x01, 0x61, 0x01, 
  0x00, 0x10, 0x9F, 0x66, 0x01, 0x00, 0xB1, 0x61, 0x01, 0x00, 
  0x34, 0x52, 0x00, 0x00, 0x37, 0x63, 0x01, 0x00, 0x01, 0x61, 
  0x01, 0x00, 0x00, 0x6A, 0x60, 0x01, 0x00, 0x10, 0x07, 0x67, 
  0x01, 0x00, 0x6A, 0x60, 0x01, 0x00, 0x07, 0x94, 0x61, 0x01, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 
  0x61, 0x01, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xB1, 0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 
  0xB1, 0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0x0A, 
  0x62, 0x01, 0x00, 0x89, 0x66, 0x01, 0x00, 0x01, 0x61, 0x01, 
  0x00, 0x10, 0x9F, 0x66, 0x01, 0x00, 0xB1, 0x61, 0x01, 0x00, 
  0x63, 0x08, 0x00, 0x00, 0x37, 0x63, 0x01, 0x00, 0x01, 0x61, 
  0x01, 0x00, 0x00, 0x6A, 0x60, 0x01, 0x00, 0x10, 0x07, 0x67, 
  0x01, 0x00, 0x6A, 0x60, 0x01, 0x00, 0x07, 0x94, 0x61, 0x01, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 
  0x61, 0x01, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xB1, 0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 
  0xB1, 0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0x0A, 
  0x62, 0x01, 0x00, 0x89, 0x66, 0x01, 0x00, 0x01, 0x61, 0x01, 
  0x00, 0x10, 0x9F, 0x66, 0x01, 0x00, 0xB1, 0x61, 0x01, 0x00, 
  0x07, 0x00, 0x00, 0x00, 0xA5, 0x63, 0x01, 0x00, 0x01, 0x61, 
  0x01, 0x00, 0x00, 0x6A, 0x60, 0x01, 0x00, 0x10, 0x07, 0x67, 
  0x01, 0x00, 0x6A, 0x60, 0x01, 0x00, 0x07, 0x94, 0x61, 0x01, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 
  0x61, 0x01, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0xB1, 0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 
  0xB1, 0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0x0A, 
  0x62, 0x01, 0x00, 0x89, 0x66, 0x01, 0x00, 0x01, 0x61, 0x01, 
  0x00, 0x10, 0x9F, 0x66, 0x01, 0x00, 0xB1, 0x61, 0x01, 0x00, 
  0x43, 0x07, 0x00, 0x00, 0x37, 0x63, 0x01, 0x00, 0x01, 0x61, 
  0x01, 0x00, 0x00, 0x26, 0x61, 0x01, 0x00, 0x10, 0x6A, 0x60, 
  0x01, 0x00, 0x00, 0x6B, 0x67, 0x01, 0x00, 0xBB, 0x6D, 0x01, 
  0x00, 0x6A, 0x60, 0x01, 0x00, 0x07, 0x94, 0x61, 0x01, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x61, 
  0x01, 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xB1, 0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0xB1, 
  0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0x01, 0x61, 
  0x01, 0x00, 0x10, 0xB1, 0x61, 0x01, 0x00, 0x01, 0x00, 0x00, 
  0x00, 0x6A, 0x60, 0x01, 0x00, 0x10, 0x07, 0x67, 0x01, 0x00, 
  0x6A, 0x60, 0x01, 0x00, 0x07, 0x94, 0x61, 0x01, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x61, 0x01, 
  0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB1, 
  0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0xB1, 0x62, 
  0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0x0A, 0x62, 0x01, 
  0x00, 0x89, 0x66, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 
  0x9F, 0x66, 0x01, 0x00, 0xB1, 0x61, 0x01, 0x00, 0x63, 0x53, 
  0x06, 0x00, 0xC9, 0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 
  0x00, 0x6A, 0x60, 0x01, 0x00, 0x10, 0x07, 0x67, 0x01, 0x00, 
  0x6A, 0x60, 0x01, 0x00, 0x07, 0x94, 0x61, 0x01, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x61, 0x01, 
  0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB1, 
  0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0xB1, 0x62, 
  0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0x0A, 0x62, 0x01, 
  0x00, 0x89, 0x66, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 
  0x9F, 0x66, 0x01, 0x00, 0xB1, 0x61, 0x01, 0x00, 0x54, 0x54, 
  0x07, 0x00, 0x13, 0x64, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 
  0x00, 0x6A, 0x60, 0x01, 0x00, 0x10, 0x07, 0x67, 0x01, 0x00, 
  0x6A, 0x60, 0x01, 0x00, 0x07, 0x94, 0x61, 0x01, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x61, 0x01, 
  0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB1, 
  0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0xB1, 0x62, 
  0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0x0A, 0x62, 0x01, 
  0x00, 0x89, 0x66, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 
  0x9F, 0x66, 0x01, 0x00, 0xB1, 0x61, 0x01, 0x00, 0x54, 0x07, 
  0x00, 0x00, 0x81, 0x64, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 
  0x00, 0x6A, 0x60, 0x01, 0x00, 0x10, 0x07, 0x67, 0x01, 0x00, 
  0x6A, 0x60, 0x01, 0x00, 0x07, 0x94, 0x61, 0x01, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x61, 0x01, 
  0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB1, 
  0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0xB1, 0x62, 
  0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0x0A, 0x62, 0x01, 
  0x00, 0x89, 0x66, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 
  0x9F, 0x66, 0x01, 0x00, 0xB1, 0x61, 0x01, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0xC9, 0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 
  0x00, 0x6A, 0x60, 0x01, 0x00, 0x10, 0x07, 0x67, 0x01, 0x00, 
  0x6A, 0x60, 0x01, 0x00, 0x07, 0x94, 0x61, 0x01, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x61, 0x01, 
  0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB1, 
  0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0xB1, 0x62, 
  0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0x0A, 0x62, 0x01, 
  0x00, 0x89, 0x66, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 
  0x9F, 0x66, 0x01, 0x00, 0xB1, 0x61, 0x01, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x37, 0x63, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 
  0x00, 0x6A, 0x60, 0x01, 0x00, 0x10, 0x07, 0x67, 0x01, 0x00, 
  0x6A, 0x60, 0x01, 0x00, 0x07, 0x94, 0x61, 0x01, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x61, 0x01, 
  0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB1, 
  0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0xB1, 0x62, 
  0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0x0A, 0x62, 0x01, 
  0x00, 0x89, 0x66, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 
  0x9F, 0x66, 0x01, 0x00, 0xB1, 0x61, 0x01, 0x00, 0x11, 0x07, 
  0x00, 0x00, 0xC9, 0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 
  0x00, 0x6A, 0x60, 0x01, 0x00, 0x10, 0x07, 0x67, 0x01, 0x00, 
  0x6A, 0x60, 0x01, 0x00, 0x07, 0x94, 0x61, 0x01, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x61, 0x01, 
  0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB1, 
  0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0xB1, 0x62, 
  0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0x0A, 0x62, 0x01, 
  0x00, 0x89, 0x66, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 
  0x9F, 0x66, 0x01, 0x00, 0xB1, 0x61, 0x01, 0x00, 0x72, 0x09, 
  0x00, 0x00, 0x37, 0x63, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 
  0x00, 0x26, 0x61, 0x01, 0x00, 0x10, 0x6A, 0x60, 0x01, 0x00, 
  0x00, 0x6B, 0x67, 0x01, 0x00, 0x7F, 0x70, 0x01, 0x00, 0x6A, 
  0x60, 0x01, 0x00, 0x07, 0x94, 0x61, 0x01, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x61, 0x01, 0x00, 
  0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB1, 0x62, 
  0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0xB1, 0x62, 0x01, 
  0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0x01, 0x61, 0x01, 0x00, 
  0x10, 0xB1, 0x61, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x6A, 
  0x60, 0x01, 0x00, 0x10, 0x07, 0x67, 0x01, 0x00, 0x6A, 0x60, 
  0x01, 0x00, 0x07, 0x94, 0x61, 0x01, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x61, 0x01, 0x00, 0xF8, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB1, 0x62, 0x01, 
  0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0xB1, 0x62, 0x01, 0x00, 
  0x01, 0x61, 0x01, 0x00, 0x10, 0x0A, 0x62, 0x01, 0x00, 0x89, 
  0x66, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0x9F, 0x66, 
  0x01, 0x00, 0xB1, 0x61, 0x01, 0x00, 0x43, 0x36, 0x00, 0x00, 
  0xC9, 0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x00, 0x6A, 
  0x60, 0x01, 0x00, 0x10, 0x07, 0x67, 0x01, 0x00, 0x6A, 0x60, 
  0x01, 0x00, 0x07, 0x94, 0x61, 0x01, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x61, 0x01, 0x00, 0xF8, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB1, 0x62, 0x01, 
  0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0xB1, 0x62, 0x01, 0x00, 
  0x01, 0x61, 0x01, 0x00, 0x10, 0x0A, 0x62, 0x01, 0x00, 0x89, 
  0x66, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0x9F, 0x66, 
  0x01, 0x00, 0xB1, 0x61, 0x01, 0x00, 0x54, 0x00, 0x00, 0x00, 
  0xC9, 0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x00, 0x6A, 
  0x60, 0x01, 0x00, 0x10, 0x07, 0x67, 0x01, 0x00, 0x6A, 0x60, 
  0x01, 0x00, 0x07, 0x94, 0x61, 0x01, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x61, 0x01, 0x00, 0xF8, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB1, 0x62, 0x01, 
  0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0xB1, 0x62, 0x01, 0x00, 
  0x01, 0x61, 0x01, 0x00, 0x10, 0x0A, 0x62, 0x01, 0x00, 0x89, 
  0x66, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0x9F, 0x66, 
  0x01, 0x00, 0xB1, 0x61, 0x01, 0x00, 0x54, 0x00, 0x00, 0x00, 
  0x81, 0x64, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x00, 0x6A, 
  0x60, 0x01, 0x00, 0x10, 0x07, 0x67, 0x01, 0x00, 0x6A, 0x60, 
  0x01, 0x00, 0x07, 0x94, 0x61, 0x01, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x61, 0x01, 0x00, 0xF8, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB1, 0x62, 0x01, 
  0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0xB1, 0x62, 0x01, 0x00, 
  0x01, 0x61, 0x01, 0x00, 0x10, 0x0A, 0x62, 0x01, 0x00, 0x89, 
  0x66, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0x9F, 0x66, 
  0x01, 0x00, 0xB1, 0x61, 0x01, 0x00, 0x31, 0x03, 0x00, 0x00, 
  0x81, 0x64, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x00, 0x6A, 
  0x60, 0x01, 0x00, 0x10, 0x07, 0x67, 0x01, 0x00, 0x6A, 0x60, 
  0x01, 0x00, 0x07, 0x94, 0x61, 0x01, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x61, 0x01, 0x00, 0xF8, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB1, 0x62, 0x01, 
  0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0xB1, 0x62, 0x01, 0x00, 
  0x01, 0x61, 0x01, 0x00, 0x10, 0x0A, 0x62, 0x01, 0x00, 0x89, 
  0x66, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0x9F, 0x66, 
  0x01, 0x00, 0xB1, 0x61, 0x01, 0x00, 0x12, 0x00, 0x00, 0x00, 
  0x81, 0x64, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x00, 0x6A, 
  0x60, 0x01, 0x00, 0x10, 0x07, 0x67, 0x01, 0x00, 0x6A, 0x60, 
  0x01, 0x00, 0x07, 0x94, 0x61, 0x01, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x61, 0x01, 0x00, 0xF8, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB1, 0x62, 0x01, 
  0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0xB1, 0x62, 0x01, 0x00, 
  0x01, 0x61, 0x01, 0x00, 0x10, 0x0A, 0x62, 0x01, 0x00, 0x89, 
  0x66, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0x9F, 0x66, 
  0x01, 0x00, 0xB1, 0x61, 0x01, 0x00, 0x21, 0x03, 0x00, 0x00, 
  0xC9, 0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x00, 0x6A, 
  0x60, 0x01, 0x00, 0x10, 0x07, 0x67, 0x01, 0x00, 0x6A, 0x60, 
  0x01, 0x00, 0x07, 0x94, 0x61, 0x01, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x61, 0x01, 0x00, 0x10, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB1, 0x62, 0x01, 
  0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0xB1, 0x62, 0x01, 0x00, 
  0x01, 0x61, 0x01, 0x00, 0x10, 0x0A, 0x62, 0x01, 0x00, 0x89, 
  0x66, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0x9F, 0x66, 
  0x01, 0x00, 0xB1, 0x61, 0x01, 0x00, 0x66, 0x06, 0x00, 0x00, 
  0x37, 0x63, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x00, 0x26, 
  0x61, 0x01, 0x00, 0x10, 0x6A, 0x60, 0x01, 0x00, 0x00, 0x6B, 
  0x67, 0x01, 0x00, 0x43, 0x73, 0x01, 0x00, 0x6A, 0x60, 0x01, 
  0x00, 0x07, 0x94, 0x61, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x94, 0x61, 0x01, 0x00, 0xFC, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB1, 0x62, 0x01, 0x00, 
  0x01, 0x61, 0x01, 0x00, 0x10, 0xB1, 0x62, 0x01, 0x00, 0x01, 
  0x61, 0x01, 0x00, 0x10, 0x01, 0x61, 0x01, 0x00, 0x10, 0xB1, 
  0x61, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x6A, 0x60, 0x01, 
  0x00, 0x10, 0x07, 0x67, 0x01, 0x00, 0x6A, 0x60, 0x01, 0x00, 
  0x07, 0x94, 0x61, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x94, 0x61, 0x01, 0x00, 0xF8, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB1, 0x62, 0x01, 0x00, 0x01, 
  0x61, 0x01, 0x00, 0x10, 0xB1, 0x62, 0x01, 0x00, 0x01, 0x61, 
  0x01, 0x00, 0x10, 0x0A, 0x62, 0x01, 0x00, 0x89, 0x66, 0x01, 
  0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0x9F, 0x66, 0x01, 0x00, 
  0xB1, 0x61, 0x01, 0x00, 0x97, 0x00, 0x00, 0x00, 0x37, 0x63, 
  0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x00, 0x6A, 0x60, 0x01, 
  0x00, 0x10, 0x07, 0x67, 0x01, 0x00, 0x6A, 0x60, 0x01, 0x00, 
  0x07, 0x94, 0x61, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x94, 0x61, 0x01, 0x00, 0xF8, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB1, 0x62, 0x01, 0x00, 0x01, 
  0x61, 0x01, 0x00, 0x10, 0xB1, 0x62, 0x01, 0x00, 0x01, 0x61, 
  0x01, 0x00, 0x10, 0x0A, 0x62, 0x01, 0x00, 0x89, 0x66, 0x01, 
  0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0x9F, 0x66, 0x01, 0x00, 
  0xB1, 0x61, 0x01, 0x00, 0x44, 0x07, 0x00, 0x00, 0xC9, 0x62, 
  0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x00, 0x6A, 0x60, 0x01, 
  0x00, 0x10, 0x07, 0x67, 0x01, 0x00, 0x6A, 0x60, 0x01, 0x00, 
  0x07, 0x94, 0x61, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x94, 0x61, 0x01, 0x00, 0xF8, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB1, 0x62, 0x01, 0x00, 0x01, 
  0x61, 0x01, 0x00, 0x10, 0xB1, 0x62, 0x01, 0x00, 0x01, 0x61, 
  0x01, 0x00, 0x10, 0x0A, 0x62, 0x01, 0x00, 0x89, 0x66, 0x01, 
  0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0x9F, 0x66, 0x01, 0x00, 
  0xB1, 0x61, 0x01, 0x00, 0x54, 0x00, 0x00, 0x00, 0x81, 0x64, 
  0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x00, 0x6A, 0x60, 0x01, 
  0x00, 0x10, 0x07, 0x67, 0x01, 0x00, 0x6A, 0x60, 0x01, 0x00, 
  0x07, 0x94, 0x61, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x94, 0x61, 0x01, 0x00, 0xF8, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB1, 0x62, 0x01, 0x00, 0x01, 
  0x61, 0x01, 0x00, 0x10, 0xB1, 0x62, 0x01, 0x00, 0x01, 0x61, 
  0x01, 0x00, 0x10, 0x0A, 0x62, 0x01, 0x00, 0x89, 0x66, 0x01, 
  0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0x9F, 0x66, 0x01, 0x00, 
  0xB1, 0x61, 0x01, 0x00, 0x82, 0x00, 0x00, 0x00, 0x37, 0x63, 
  0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x00, 0x6A, 0x60, 0x01, 
  0x00, 0x10, 0x07, 0x67, 0x01, 0x00, 0x6A, 0x60, 0x01, 0x00, 
  0x07, 0x94, 0x61, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x94, 0x61, 0x01, 0x00, 0xF8, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB1, 0x62, 0x01, 0x00, 0x01, 
  0x61, 0x01, 0x00, 0x10, 0xB1, 0x62, 0x01, 0x00, 0x01, 0x61, 
  0x01, 0x00, 0x10, 0x0A, 0x62, 0x01, 0x00, 0x89, 0x66, 0x01, 
  0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0x9F, 0x66, 0x01, 0x00, 
  0xB1, 0x61, 0x01, 0x00, 0x12, 0x00, 0x00, 0x00, 0x81, 0x64, 
  0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x00, 0x6A, 0x60, 0x01, 
  0x00, 0x10, 0x07, 0x67, 0x01, 0x00, 0x6A, 0x60, 0x01, 0x00, 
  0x07, 0x94, 0x61, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x94, 0x61, 0x01, 0x00, 0xF8, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB1, 0x62, 0x01, 0x00, 0x01, 
  0x61, 0x01, 0x00, 0x10, 0xB1, 0x62, 0x01, 0x00, 0x01, 0x61, 
  0x01, 0x00, 0x10, 0x0A, 0x62, 0x01, 0x00, 0x89, 0x66, 0x01, 
  0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0x9F, 0x66, 0x01, 0x00, 
  0xB1, 0x61, 0x01, 0x00, 0x23, 0x02, 0x00, 0x00, 0xC9, 0x62, 
  0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x00, 0x6A, 0x60, 0x01, 
  0x00, 0x10, 0x07, 0x67, 0x01, 0x00, 0x6A, 0x60, 0x01, 0x00, 
  0x07, 0x94, 0x61, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x94, 0x61, 0x01, 0x00, 0x10, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0xB1, 0x62, 0x01, 0x00, 0x01, 
  0x61, 0x01, 0x00, 0x10, 0xB1, 0x62, 0x01, 0x00, 0x01, 0x61, 
  0x01, 0x00, 0x10, 0x94, 0x61, 0x01, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x61, 0x01, 0x00, 0x01, 
  0x9F, 0x66, 0x01, 0x00, 0x26, 0x61, 0x01, 0x00, 0x01, 0x6A, 
  0x60, 0x01, 0x00, 0x07, 0x94, 0x61, 0x01, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x61, 0x01, 0x00, 
  0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB1, 0x62, 
  0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0xB1, 0x62, 0x01, 
  0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0x9F, 0x66, 0x01, 0x00, 
  0x90, 0x60, 0x01, 0x00, 0x01, 0x37, 0x63, 0x01, 0x00, 0x01, 
  0x61, 0x01, 0x00, 0x00, 0x26, 0x61, 0x01, 0x00, 0x10, 0x6A, 
  0x60, 0x01, 0x00, 0x00, 0x6B, 0x67, 0x01, 0x00, 0x40, 0x76, 
  0x01, 0x00, 0x6A, 0x60, 0x01, 0x00, 0x07, 0x94, 0x61, 0x01, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 
  0x61, 0x01, 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xB1, 0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 
  0xB1, 0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0x01, 
  0x61, 0x01, 0x00, 0x10, 0xB1, 0x61, 0x01, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x6A, 0x60, 0x01, 0x00, 0x10, 0x07, 0x67, 0x01, 
  0x00, 0x6A, 0x60, 0x01, 0x00, 0x07, 0x94, 0x61, 0x01, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x61, 
  0x01, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xB1, 0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0xB1, 
  0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0x0A, 0x62, 
  0x01, 0x00, 0x89, 0x66, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 
  0x10, 0x9F, 0x66, 0x01, 0x00, 0xB1, 0x61, 0x01, 0x00, 0x42, 
  0x73, 0x00, 0x00, 0xC9, 0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 
  0x00, 0x00, 0x6A, 0x60, 0x01, 0x00, 0x10, 0x07, 0x67, 0x01, 
  0x00, 0x6A, 0x60, 0x01, 0x00, 0x07, 0x94, 0x61, 0x01, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x61, 
  0x01, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xB1, 0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0xB1, 
  0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0x0A, 0x62, 
  0x01, 0x00, 0x89, 0x66, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 
  0x10, 0x9F, 0x66, 0x01, 0x00, 0xB1, 0x61, 0x01, 0x00, 0x42, 
  0x00, 0x00, 0x00, 0xA5, 0x63, 0x01, 0x00, 0x01, 0x61, 0x01, 
  0x00, 0x00, 0x6A, 0x60, 0x01, 0x00, 0x10, 0x07, 0x67, 0x01, 
  0x00, 0x6A, 0x60, 0x01, 0x00, 0x07, 0x94, 0x61, 0x01, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x61, 
  0x01, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xB1, 0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0xB1, 
  0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0x0A, 0x62, 
  0x01, 0x00, 0x89, 0x66, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 
  0x10, 0x9F, 0x66, 0x01, 0x00, 0xB1, 0x61, 0x01, 0x00, 0x44, 
  0x07, 0x00, 0x00, 0xA5, 0x63, 0x01, 0x00, 0x01, 0x61, 0x01, 
  0x00, 0x00, 0x6A, 0x60, 0x01, 0x00, 0x10, 0x07, 0x67, 0x01, 
  0x00, 0x6A, 0x60, 0x01, 0x00, 0x07, 0x94, 0x61, 0x01, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x61, 
  0x01, 0x00, 0xF4, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xB1, 0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0xB1, 
  0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0x01, 0x61, 
  0x01, 0x00, 0x10, 0xB1, 0x61, 0x01, 0x00, 0x43, 0x74, 0x00, 
  0x00, 0x6A, 0x60, 0x01, 0x00, 0x10, 0x07, 0x67, 0x01, 0x00, 
  0x6A, 0x60, 0x01, 0x00, 0x07, 0x94, 0x61, 0x01, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x61, 0x01, 
  0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB1, 
  0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0xB1, 0x62, 
  0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0x0A, 0x62, 0x01, 
  0x00, 0x89, 0x66, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 
  0x9F, 0x66, 0x01, 0x00, 0xB1, 0x61, 0x01, 0x00, 0x33, 0x00, 
  0x00, 0x00, 0xA5, 0x63, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 
  0x00, 0x6A, 0x60, 0x01, 0x00, 0x10, 0x07, 0x67, 0x01, 0x00, 
  0x6A, 0x60, 0x01, 0x00, 0x07, 0x94, 0x61, 0x01, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x61, 0x01, 
  0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB1, 
  0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0xB1, 0x62, 
  0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0x0A, 0x62, 0x01, 
  0x00, 0x89, 0x66, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 
  0x9F, 0x66, 0x01, 0x00, 0xB1, 0x61, 0x01, 0x00, 0x88, 0x00, 
  0x00, 0x00, 0x81, 0x64, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 
  0x00, 0x6A, 0x60, 0x01, 0x00, 0x10, 0x07, 0x67, 0x01, 0x00, 
  0x6A, 0x60, 0x01, 0x00, 0x07, 0x94, 0x61, 0x01, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x61, 0x01, 
  0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB1, 
  0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0xB1, 0x62, 
  0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0x0A, 0x62, 0x01, 
  0x00, 0x89, 0x66, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 
  0x9F, 0x66, 0x01, 0x00, 0xB1, 0x61, 0x01, 0x00, 0x64, 0x07, 
  0x00, 0x00, 0xC9, 0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 
  0x00, 0x6A, 0x60, 0x01, 0x00, 0x10, 0x07, 0x67, 0x01, 0x00, 
  0x6A, 0x60, 0x01, 0x00, 0x07, 0x94, 0x61, 0x01, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x61, 0x01, 
  0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB1, 
  0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0xB1, 0x62, 
  0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 0x94, 0x61, 0x01, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x61, 0x01, 0x00, 0x01, 0x9F, 0x66, 0x01, 0x00, 0x26, 0x61, 
  0x01, 0x00, 0x01, 0x6A, 0x60, 0x01, 0x00, 0x07, 0x94, 0x61, 
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x94, 0x61, 0x01, 0x00, 0xF4, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xB1, 0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 
  0x10, 0xB1, 0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x10, 
  0x9F, 0x66, 0x01, 0x00, 0x90, 0x60, 0x01, 0x00, 0x01, 0x37, 
  0x63, 0x01, 0x00, 0x01, 0x61, 0x01, 0x00, 0x00, 0x26, 0x61, 
  0x01, 0x00, 0x10, 0x6A, 0x60, 0x01, 0x00, 0x00, 0x6B, 0x67, 
  0x01, 0x00, 0x82, 0x79, 0x01, 0x00, 0x6A, 0x60, 0x01, 0x00, 
  0x07, 0x94, 0x61, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x94, 0x61, 0x01, 0x00, 0xFC, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xB1, 0x62, 0x01, 0x00, 0x01, 
  0x61, 0x01, 0x00, 0x10, 0xB1, 0x62, 0x01, 0x00, 0x01, 0x61, 
  0x01, 0x00, 0x10, 0x01, 0x61, 0x01, 0x00, 0x10, 0xB1, 0x61, 
  0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x6A, 0x60, 0x01, 0x00, 
  0x10, 0x07, 0x67, 0x01, 0x00, 0x6A, 0x60, 0x01, 0x00, 0x07, 
  0x94, 0x61, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x94, 0x61, 0x01, 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xB1, 0x62, 0x01, 0x00, 0x01, 0x61, 
  0x01, 0x00, 0x10, 0xB1, 0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 
  0x00, 0x10, 0x94, 0x61, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0x61, 0x01, 0x00, 0x01, 0x9F, 
  0x66, 0x01, 0x00, 0x26, 0x61, 0x01, 0x00, 0x01, 0x0A, 0x62, 
  0x01, 0x00, 0x94, 0x61, 0x01, 0x00, 0x10, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xB1, 0x62, 0x01, 0x00, 0x01, 0x61, 
  0x01, 0x00, 0x00, 0x6C, 0x62, 0x01, 0x00, 0x01, 0x61, 0x01, 
  0x00, 0x07, 0x6A, 0x60, 0x01, 0x00, 0x0F, 0x6A, 0x60, 0x01, 
  0x00, 0x0E, 0x6A, 0x60, 0x01, 0x00, 0x0D, 0x6A, 0x60, 0x01, 
  0x00, 0x0C, 0x6A, 0x60, 0x01, 0x00, 0x0B, 0x6A, 0x60, 0x01, 
  0x00, 0x0A, 0x6A, 0x60, 0x01, 0x00, 0x09, 0x6A, 0x60, 0x01, 
  0x00, 0x08, 0x6A, 0x60, 0x01, 0x00, 0x07, 0x6A, 0x60, 0x01, 
  0x00, 0x06, 0x6A, 0x60, 0x01, 0x00, 0x05, 0x6A, 0x60, 0x01, 
  0x00, 0x04, 0x6A, 0x60, 0x01, 0x00, 0x03, 0x6A, 0x60, 0x01, 
  0x00, 0x02, 0x6A, 0x60, 0x01, 0x00, 0x01, 0x6A, 0x60, 0x01, 
  0x00, 0x00, 0x4E, 0x60, 0x01, 0x00,0x0,0x0,0x0]
# r15 = virt stack ptr
# r13 = virt ins ptr
# r14 = image base

vip = 0
opcode = merge_bytes(bytecode,vip,"dword") #opcodes have this format
vip+=4
while(vip<len(bytecode)):
  print("vip: ",hex(vip),end=':')
  if(opcode==0x1604E):
    print("vm exit")
    exit()
  
  if(opcode==0x1606A or (merge_bytes(bytecode,vip-5,"dword") == 0x1606A)):
    print(f"push QWORD [r{merge_bytes(bytecode,vip,'qword')&0xFF}]")
    vip+=1
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue
  
  if(opcode==0x16090 or (merge_bytes(bytecode,vip-5,"dword") == 0x16090)):
    print(f"push DWORD [r{merge_bytes(bytecode,vip,'qword')&0xFF}]")
    vip +=1
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue
  
  if(opcode==0x160B5 or (merge_bytes(bytecode,vip-5,"dword") == 0x160B5)):
    print(f"push WORD [r{merge_bytes(bytecode,vip,'qword')&0xFF}]")
    vip +=1
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue
  
  if(opcode==0x160DC or (merge_bytes(bytecode,vip-5,"dword") == 0x160DC)):
    print(f"push BYTE [r{merge_bytes(bytecode,vip,'qword')&0xFF}]")
    vip +=1
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue
  
  if(opcode==0x16101 or (merge_bytes(bytecode,vip-5,"dword") == 0x16101)):
    print(f"pop QWORD [r{merge_bytes(bytecode,vip,'qword')&0xFF}]")
    vip+=1
    opcode = merge_bytes(bytecode,vip,'dword')
    vip +=4
    continue

  if(opcode==0x16126 or (merge_bytes(bytecode,vip-5,"dword") == 0x16126)):
    print(f"pop DWORD [r{merge_bytes(bytecode,vip,'qword')&0xFF}]")
    vip +=1
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue

  if(opcode==0x1614A or (merge_bytes(bytecode,vip-5,"dword") == 0x1614A)):
    print(f"pop WORD [r{merge_bytes(bytecode,vip,'qword')&0xFF}]")
    vip +=1
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue
  
  if(opcode==0x16170 or (merge_bytes(bytecode,vip-5,"dword") == 0x16170)):
    print(f"pop BYTE [r{merge_bytes(bytecode,vip,'qword')&0xFF}]")
    vip +=1
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue
  
  if(opcode==0x16194 or (merge_bytes(bytecode,vip-12,"dword") == 0x16194)):
    print(f"push QWORD {hex(merge_bytes(bytecode,vip,'qword'))}")
    vip +=8
    opcode = merge_bytes(bytecode,vip,"dword")

    vip+=4
    continue

  if(opcode==0x161B1 or (merge_bytes(bytecode,vip-8,"dword") == 0x161B1)):
    print(f"push DWORD {hex(merge_bytes(bytecode,vip,'qword')&0xFFFFFFFF)}")
    vip +=4
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue
  
  if(opcode==0x161CE or (merge_bytes(bytecode,vip-6,"dword") == 0x161CE)):
    print(f"push WORD {hex(merge_bytes(bytecode,vip,'qword')&0xFFFF)}")
    vip +=2
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue

  if(opcode==0x161ED or (merge_bytes(bytecode,vip-5,"dword") == 0x161ED)):
    print(f"push BYTE {hex(merge_bytes(bytecode,vip,'qword')&0xFF)}")
    vip +=1
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue

  if(opcode==0x1620A or (merge_bytes(bytecode,vip-4,"dword") == 0x1620A)):
    print(f"push QWORD virt.sp")
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue

  if(opcode==0x16222 or (merge_bytes(bytecode,vip-4,"dword") == 0x16222)):
    print(f"push DWORD virt.sp")
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue
  
  if(opcode==0x1623A or (merge_bytes(bytecode,vip-4,"dword") == 0x1623A)):
    print(f"push WORD virt.sp")
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue

  if(opcode==0x16254 or (merge_bytes(bytecode,vip-4,"dword") == 0x16254)):
    print(f"push BYTE virt.sp")
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue

  if(opcode==0x1626C or (merge_bytes(bytecode,vip-4,"dword") == 0x1626C)):
    print(f"pop QWORD virt.sp")
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue

  if(opcode==0x1627D or (merge_bytes(bytecode,vip-4,"dword") == 0x1627D)):
    print(f"pop DWORD virt.sp")
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue
  
  if(opcode==0x1628E or (merge_bytes(bytecode,vip-4,"dword") == 0x1628E)):
    print(f"pop WORD virt.sp")
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue

  if(opcode==0x162A0 or (merge_bytes(bytecode,vip-4,"dword") == 0x162A0)):
    print(f"pop BYTE virt.sp")
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue

  if(opcode==0x162B1 or (merge_bytes(bytecode,vip-4,"dword") == 0x162B1)):
    print(f"add QWORD")
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue

  if(opcode==0x162C9 or (merge_bytes(bytecode,vip-4,"dword") == 0x162C9)):
    print(f"add DWORD")
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue

  if(opcode==0x162E5 or (merge_bytes(bytecode,vip-4,"dword") == 0x162E5)):
    print(f"add WORD")
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue

  if(opcode==0x16303 or (merge_bytes(bytecode,vip-4,"dword") == 0x16303)):
    print(f"add BYTE")
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue

  if(opcode==0x1631F or (merge_bytes(bytecode,vip-4,"dword") == 0x1631F)):
    print(f"sub QWORD")
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue

  if(opcode==0x16337 or (merge_bytes(bytecode,vip-4,"dword") == 0x16337)):
    print(f"sub DWORD")
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue

  if(opcode==0x16353 or (merge_bytes(bytecode,vip-4,"dword") == 0x16353)):
    print(f"sub WORD")
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue

  if(opcode==0x16371 or (merge_bytes(bytecode,vip-4,"dword") == 0x16371)):
    print(f"sub BYTE")
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue

  if(opcode==0x1638D or (merge_bytes(bytecode,vip-4,"dword") == 0x1638D)):
    print(f"xor QWORD")
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue

  if(opcode==0x163A5 or (merge_bytes(bytecode,vip-4,"dword") == 0x163A5)):
    print(f"xor DWORD")
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue

  if(opcode==0x163C1 or (merge_bytes(bytecode,vip-4,"dword") == 0x163C1)):
    print(f"xor WORD")
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue

  if(opcode==0x163DF or (merge_bytes(bytecode,vip-4,"dword") == 0x163DF)):
    print(f"xor BYTE")
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue

  if(opcode==0x163FB or (merge_bytes(bytecode,vip-4,"dword") == 0x163FB)):
    print(f"and QWORD")
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue

  if(opcode==0x16413 or (merge_bytes(bytecode,vip-4,"dword") == 0x16413)):
    print(f"and DWORD")
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue

  if(opcode==0x1642F or (merge_bytes(bytecode,vip-4,"dword") == 0x1642F)):
    print(f"and WORD")
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue

  if(opcode==0x1644D or (merge_bytes(bytecode,vip-4,"dword") == 0x1644D)):
    print(f"and BYTE")
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue

  if(opcode==0x163FB or (merge_bytes(bytecode,vip-4,"dword") == 0x163FB)):
    print(f"or QWORD")
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue

  if(opcode==0x16481 or (merge_bytes(bytecode,vip-4,"dword") == 0x16481)):
    print(f"or DWORD")
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue

  if(opcode==0x1642F or (merge_bytes(bytecode,vip-4,"dword") == 0x1642F)):
    print(f"or WORD")
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue

  if(opcode==0x1644D or (merge_bytes(bytecode,vip-4,"dword") == 0x1644D)):
    print(f"or BYTE")
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue

  if(opcode==0x164D7 or (merge_bytes(bytecode,vip-4,"dword") == 0x164D7)):
    print(f"nand QWORD")
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue

  if(opcode==0x164F9 or (merge_bytes(bytecode,vip-4,"dword") == 0x164F9)):
    print(f"nand DWORD")
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue

  if(opcode==0x1651D or (merge_bytes(bytecode,vip-4,"dword") == 0x1651D)):
    print(f"nand WORD")
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue

  if(opcode==0x16546 or (merge_bytes(bytecode,vip-4,"dword") == 0x16546)):
    print(f"nand BYTE")
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue

  if(opcode==0x1656A or (merge_bytes(bytecode,vip-4,"dword") == 0x1656A)):
    print(f"nor QWORD")
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue

  if(opcode==0x1658C or (merge_bytes(bytecode,vip-4,"dword") == 0x1658C)):
    print(f"nor DWORD")
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue

  if(opcode==0x165B0 or (merge_bytes(bytecode,vip-4,"dword") == 0x165B0)):
    print(f"nor WORD")
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue

  if(opcode==0x165D9 or (merge_bytes(bytecode,vip-4,"dword") == 0x165D9)):
    print(f"nor BYTE")
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue
  
  if(opcode==0x165FD or (merge_bytes(bytecode,vip-4,"dword") == 0x165FD)):
    print(f"shl QWORD")
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue

  if(opcode==0x16620 or (merge_bytes(bytecode,vip-4,"dword") == 0x16620)):
    print(f"shl DWORD")
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue

  if(opcode==0x16642 or (merge_bytes(bytecode,vip-4,"dword") == 0x16642)):
    print(f"shl WORD")
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue

  if(opcode==0x16667 or (merge_bytes(bytecode,vip-4,"dword") == 0x16667)):
    print(f"shl BYTE")
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue
  
  if(opcode==0x16689 or (merge_bytes(bytecode,vip-4,"dword") == 0x16689)):
    print(f"load QWORD")
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue

  if(opcode==0x1669F or (merge_bytes(bytecode,vip-4,"dword") == 0x1669F)):
    print(f"load DWORD")
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue

  if(opcode==0x166B8 or (merge_bytes(bytecode,vip-4,"dword") == 0x166B8)):
    print(f"load WORD")
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue

  if(opcode==0x16667 or (merge_bytes(bytecode,vip-4,"dword") == 0x16667)):
    print(f"load BYTE")
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue

  if(opcode==0x16689 or (merge_bytes(bytecode,vip-4,"dword") == 0x16689)):
    print(f"load QWORD")
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue

  if(opcode==0x1669F or (merge_bytes(bytecode,vip-4,"dword") == 0x1669F)):
    print(f"load DWORD")
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue

  if(opcode==0x166B8 or (merge_bytes(bytecode,vip-4,"dword") == 0x166B8)):
    print(f"load WORD")
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue

  if(opcode==0x166D3 or (merge_bytes(bytecode,vip-4,"dword") == 0x166D3)):
    print(f"load BYTE")
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue

  if(opcode==0x166EC or (merge_bytes(bytecode,vip-4,"dword") == 0x166EC)):
    print(f"store QWORD")
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue

  if(opcode==0x16707  or (merge_bytes(bytecode,vip-4,"dword") == 0x16707 )):
    print(f"store DWORD")
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue

  if(opcode==0x16721 or (merge_bytes(bytecode,vip-4,"dword") == 0x16721)):
    print(f"store WORD")
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue

  if(opcode==0x1673D or (merge_bytes(bytecode,vip-4,"dword") == 0x1673D)):
    print(f"store BYTE")
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
    continue
  if(opcode==0x16757 or (merge_bytes(bytecode,vip-4+merge_bytes(bytecode,vip+1,"dword"),"dword") == 0x16757)):
    print(hex(vip),f"jmp {hex(merge_bytes(bytecode,vip,'dword'))}")
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4+merge_bytes(bytecode,vip+1,"dword")

  if(opcode==0x1676B or (merge_bytes(bytecode,vip-8,"dword") == 0x1676B)):
    print(f"jnz {hex(merge_bytes(bytecode,vip,'dword')-0x1678F)}")
    vip +=4
    opcode = merge_bytes(bytecode,vip,"dword")
    vip+=4
